// TODO(tim): Ditch JSX dependency.
import { createElement } from 'react';
import * as React from 'react';
import { renderToString } from 'react-dom/server';
import * as Helmet from 'react-helmet';
import { memoize } from 'lodash';

class Provider extends React.Component<{ addSheet(sheet: string), children? }, { }> {

  static childContextTypes = {
    // TODO(tim): Probably better to rename to `renderSheet` or similar.
    addSheet: React.PropTypes.func
  };

  getChildContext() {
    return {
      addSheet: this.props.addSheet
    };
  }

  render() {
    return this.props.children;
  }

}

// TODO(tim): Can be represented as a simple stateless functional component.
export class Style extends React.Component<{ children? }, { }> {

  static contextTypes = {
    addSheet: React.PropTypes.func
  }

  render() {
    return this.context.addSheet(this.props.children);
  }

}

type ISingleton = boolean | { [attr: string]: any } 

// TODO(tim): Exclusively used by `ServerStyled` so really should be integrated
// there.
function Styles({ sheets, singleton = false }: { sheets: ReadonlyArray<string>, singleton?: ISingleton }) {
  let styleTags;
  if (singleton) {
    const styleTag = {
      cssText: sheets.join("\n\n"),
    };
    if (typeof singleton !== 'boolean')
      Object.assign(styleTag, singleton);
    styleTags = [styleTag];
  } else {
    styleTags = sheets.map(sheet => ({ cssText: sheet }));
  }
  return <Helmet style={styleTags} />;
}

interface IServerStyledProps {
  clientContainerId?: string;
  serialize?: boolean;
  singleton?: ISingleton;
  children?;
}

export function ServerStyled({ clientContainerId, serialize = false, singleton, children }: IServerStyledProps) {

  const css = new Set<string>();

  const styledContainerProps: { id?: string } = { };
  if (clientContainerId)
    styledContainerProps.id = clientContainerId;

  function addSheet(sheet) {
    css.add(sheet);
    return null;
  }

  // Make sure to follow the exact same DOM structure as in `ClientStyled`.
  const styled = renderToString(<div>
    <Styles sheets={Array.from(css)} />
    <Provider addSheet={addSheet}>
      {children}
    </Provider>
  </div>);

  let serializer = null;
  if (serialize)
    serializer = <script dangerouslySetInnerHTML={{
      __html: `window.__CSS__ = ${JSON.stringify(Array.from(css))};`
    }} />;

  return <div>
    <Styles sheets={Array.from(css)} singleton={singleton} />
    <div {...styledContainerProps} dangerouslySetInnerHTML={{ __html: styled }} />
    {serializer}
  </div>;

}

export function ClientStyled({ children }: { children? }) {

  function addSheet(sheet) {
    return <Helmet style={[{ cssText: sheet }]} />;
  }

  // TODO(tim): Do we really need this empty `Styles` component?
  return <div>
    <Styles sheets={[]} />
    <Provider addSheet={addSheet}>
      {children}
    </Provider>
  </div>;

}
