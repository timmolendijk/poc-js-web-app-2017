import * as React from 'react';
import { renderToString } from 'react-dom/server';
import * as Helmet from 'react-helmet';

type Sheets = Set<string>;

class Provider extends React.Component<{ css: Sheets, children?: any }, { }> {

  static childContextTypes = {
    css: React.PropTypes.object
  };

  getChildContext() {
    return {
      css: this.props.css
    };
  }

  render() {
    return this.props.children;
  }

}

export class Style extends React.Component<{ children?: any }, { }> {

  constructor(props, context: { css: Sheets }) {
    super(props);
    context.css.add(props.children);
  }

  static contextTypes = {
    css: React.PropTypes.object
  }

  render() {
    return null;
  }

}

type Singleton = boolean | { [attr: string]: any } 

function Styles({ css, singleton = false }: { css?: Sheets, singleton?: Singleton }) {
  if (!css)
    return null;

  const sheets = Array.from(css);

  let styleTags;
  if (singleton) {
    const styleTag = {
      cssText: sheets.join("\n\n"),
    };
    if (typeof singleton !== 'boolean')
      Object.assign(styleTag, singleton);
    styleTags = [styleTag];
  } else {
    styleTags = sheets.map(sheet => ({ cssText: sheet }));
  }

  return <Helmet style={styleTags} />
}

export function Styled({ css = new Set<string>(), children }: { css?: Sheets, children?: any }) {
  return <div>
    <Styles css={css} />
    <Provider css={css}>
      {children}
    </Provider>
  </div>;
}

interface ServerStyledProps {
  clientContainerId?: string;
  serialize?: boolean;
  singleton?: Singleton;
  children?: any;
}

export function ServerStyled({ clientContainerId, serialize = false, singleton, children }: ServerStyledProps) {

  const css = new Set<string>();

  const styledContainerProps: { id?: string } = { };
  if (clientContainerId)
    styledContainerProps.id = clientContainerId;

  const styled = renderToString(<Styled css={css}>{children}</Styled>);

  let serializer = null;
  if (serialize)
    serializer = <script dangerouslySetInnerHTML={{
      __html: `window.__CSS__ = ${JSON.stringify(Array.from(css))};`
    }} />;

  return <div>
    <Styles css={css} singleton={singleton} />
    <div {...styledContainerProps} dangerouslySetInnerHTML={{ __html: styled }} />
    {serializer}
  </div>;

}

export function ClientStyled({ children }: { children?: any }) {

  const css = new Set<string>((window as any).__CSS__);

  return <Styled css={css}>{children}</Styled>;
  
}
