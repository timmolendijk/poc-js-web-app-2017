import * as React from 'react';
import { observable, asFlat } from 'mobx';
import { observer } from 'mobx-react';

function getComponentName(Component: React.ComponentClass<any> | React.StatelessComponent<any>) {
  return Component.displayName || Component.name || Component.constructor && Component.constructor.name;
}

export function propsObserver<P, R>(createRenderProps: (props: P) => R) {
  return (BaseComponent: React.ComponentClass<R> | React.StatelessComponent<R>) =>
    observer<P>(class extends React.Component<P, {}> {
      // TODO(tim): Is this winding naming truly useful?
      static displayName = `propsObserver(${getComponentName(BaseComponent)})`;
      private observableProps: R;
      private renderKeys: Array<string>;
      render() {
        if (!this.observableProps) {
          const propDefs = createRenderProps(this.props);
          this.renderKeys = Object.keys(propDefs);
          this.observableProps = observable(asFlat(propDefs));
        }
        const renderProps = {} as R;
        for (const key of this.renderKeys)
          renderProps[key] = this.observableProps[key];
        return React.createElement<R>(BaseComponent as React.ComponentClass<R>, renderProps);
      }
    });
}
