import * as url from 'url';
import * as fetch from 'isomorphic-fetch';

import * as jsonp from 'jsonp';
import * as promisify from 'es6-promisify';
const jsonpAsync = promisify(jsonp);

import { TransportListOptions, createTransportError } from 'Transport';
import { MemberData } from './transport';

export interface ListOptions extends TransportListOptions {
  max?: number;
  eventId?: string;
}

function getMembersEndpoint() {
  return url.format({
    protocol: 'https',
    hostname: 'api.meetup.com',
    pathname: 'AmsterdamJS/members',
    query: {
      desc: 'false',
      'photo-host': 'public',
      page: 200,
      sig_id: '5314113',
      order: 'joined',
      sig: '40ce35726d361ace595406080daf3ac36826bf05'
    }
  });
}

function getRsvpsEndpoint(eventId: string) {
  return url.format({
    protocol: 'https',
    hostname: 'api.meetup.com',
    pathname: `AmsterdamJS/events/${eventId}/rsvps`,
    query: {
      'photo-host': 'public',
      sig_id: '5314113',
      sig: '01af3822f6687251444d32a1506d72c23b4beee3'
    }
  });
}

function fromSourceFormat(data: any): MemberData {
  return {
    id: data.id,
    name: data.name,
    image: data.photo ? data.photo.thumb_link : null
  };
}

// TODO(tim): Can't we export this variable right away with TypeScript's module
// semantics?
export let list;

if (process.env.RUN_ENV === 'server')

  list = async function ({ max = Infinity, eventId }: ListOptions = {}) {
    if (eventId) {
      const response = await fetch(getRsvpsEndpoint(eventId));
      if (!response.ok)
        throw createTransportError('list', `${response.status}: ${response.statusText}`);
      return (await response.json())
        .slice(0, Math.min(5, max))
        .filter(rsvp => rsvp.response === 'yes')
        .map(rsvp => rsvp.member)
        .map(fromSourceFormat);
    } else {
      const response = await fetch(getMembersEndpoint());
      if (!response.ok)
        throw createTransportError('list', `${response.status}: ${response.statusText}`);
      return (await response.json())
        .slice(0, Math.min(5, max))
        .map(fromSourceFormat);
    }
  };

else

  list = async function ({ max = Infinity, eventId }: ListOptions = {}) {
    if (eventId) {
      const response = await jsonpAsync(getRsvpsEndpoint(eventId), {
        param: 'callback',
        name: 'cb'
      });
      if (response.data.errors && response.data.errors.length)
        throw createTransportError('list', `${response.data.errors[0].code}: ${response.data.errors[0].message}`);
      return response.data
        .slice(0, max)
        .filter(rsvp => rsvp.response === 'yes')
        .map(rsvp => rsvp.member)
        .map(fromSourceFormat);
    } else {
      const response = await jsonpAsync(getMembersEndpoint(), {
        param: 'callback',
        name: 'cb'
      });
      if (response.data.errors && response.data.errors.length)
        throw createTransportError('list', `${response.data.errors[0].code}: ${response.data.errors[0].message}`);
      return response.data
        .slice(0, max)
        .map(fromSourceFormat);
    }
  };

export default list;
