import * as moment from 'moment';
import { pick } from 'lodash';
import { computed } from 'mobx';
import { observable } from 'scoopy-mobx';
import { ITransport } from 'transport';
import list from './list';

export interface IEventData {
  id: number;
  name: string;
  pageUrl: string;
  venueName: string;
  startTime: number;
}

export default class Event implements IEventData {

  // TODO(tim): Turns out, if class contains a getter or method named `name`,
  // `Event.name` no longer returns `"Event"` (but instead `""`). Why??
  static readonly displayName = 'Event';

  static readonly transport: ITransport<Event> = {

    async list(opts?) {
      const result = await list(opts);
      // TODO(tim): Ditch artificial delay.
      await new Promise(resolve => setTimeout(resolve, 1000));
      return result.map((item: IEventData) => new Event(item));
    }

  };

  // TODO(tim): Is this data as in identical to store contents? Or values as in
  // identical to what the object fields return upon get?
  constructor(data?: Partial<IEventData>) {
    Object.assign(this, pick(data, ['id', 'name', 'pageUrl', 'venueName', 'startTime']));
  }

  @observable id: number;
  @observable name: string;
  @observable pageUrl: string;
  @observable venueName: string;
  @observable startTime: number;

  @computed get startMoment(): moment.Moment {
    return moment(this.startTime);
  }

}
