import { observable, computed } from 'mobx';
import * as moment from 'moment';
import { reportOnError } from 'error';
import * as Mescy from 'mescy';
import Transport from './transport';

// TODO(tim): Relate to `./transport.EventData`?
interface IProps {
  id;
  name: string;
  pageUrl: string;
  venueName: string;
  startTime: number;
}

export default class Event {

  static readonly Transport = Transport;

  // TODO(tim): Meh, really?
  static defaultProps: IProps = {
    id: null,
    name: null,
    pageUrl: null,
    venueName: null,
    startTime: null
  };

  constructor(state: Mescy.Container | IProps) {
    if (!(state instanceof Mescy.Container))
      state = Object.assign({}, (this.constructor as any).defaultProps, state);
    this.state = state;
  }

  private readonly state: Mescy.Container | IProps;

  private get props(): IProps {
    if (this.state instanceof Mescy.Container)
      return this.state.getProps(this);
    return this.state;
  }

  @computed get id() {
    return this.props.id;
  }

  @computed get name() {
    return this.props.name;
  }

  @computed get pageUrl() {
    return this.props.pageUrl;
  }

  @computed get venueName() {
    return this.props.venueName;
  }

  @computed get startTime() {
    return moment(this.props.startTime);
  }

  toJSON() {
    return this.props;
  }

}

Mescy.registerType(Event);
