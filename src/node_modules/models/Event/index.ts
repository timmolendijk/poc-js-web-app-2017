import { observable, computed } from 'mobx';
import * as moment from 'moment';
import { identifier, oldField, getContainer, getUntrackedField, setUntrackedField } from 'state';
import { reportOnError } from 'error';
import Transport from './transport';
import { pick } from 'lodash';

export default class Event {

  // TODO(tim): Turns out, if class contains a getter of method named `name`,
  // `Event.name` no longer returns `"Event"` (but instead `""`). Why??
  static readonly displayName = 'Event';

  static readonly Transport = Transport;

  constructor(data?) {
    // TODO(tim): We should be able to retrieve this list of stateful field
    // names from the state module. Or it could even provide a state-aware
    // assign function.
    Object.assign(this, {}, pick(data, ['id', 'name', 'pageUrl', 'venueName', 'startTime']));
  }

  @identifier()
  get id() {
    const container = getContainer(this);
    if (container)
      return container.getField(this, 'id');
    else
      return getUntrackedField(this, 'id');
  }
  set id(value) {
    const container = getContainer(this);
    if (!container)
      setUntrackedField(this, 'id', value);
  }

  @oldField()
  get name(): string {
    const container = getContainer(this);
    if (container)
      return container.getField(this, 'name');
    else
      return getUntrackedField(this, 'name');
  }
  set name(value: string) {
    const container = getContainer(this);
    if (container)
      container.setField(this, 'name', value);
    else
      setUntrackedField(this, 'name', value);
  }

  @oldField()
  get pageUrl(): string {
    const container = getContainer(this);
    if (container)
      return container.getField(this, 'pageUrl');
    else
      return getUntrackedField(this, 'pageUrl');
  }
  set pageUrl(value: string) {
    const container = getContainer(this);
    if (container)
      container.setField(this, 'pageUrl', value);
    else
      setUntrackedField(this, 'pageUrl', value);
  }

  @oldField()
  get venueName(): string {
    const container = getContainer(this);
    if (container)
      return container.getField(this, 'venueName');
    else
      return getUntrackedField(this, 'venueName');
  }
  set venueName(value: string) {
    const container = getContainer(this);
    if (container)
      container.setField(this, 'venueName', value);
    else
      setUntrackedField(this, 'venueName', value);
  }

  @oldField()
  get startTime(): number {
    const container = getContainer(this);
    if (container)
      return container.getField(this, 'startTime');
    else
      return getUntrackedField(this, 'startTime');
  }
  set startTime(value: number) {
    const container = getContainer(this);
    if (container)
      container.setField(this, 'startTime', value);
    else
      setUntrackedField(this, 'startTime', value);
  }

  get startMoment(): moment.Moment {
    return moment(this.startTime);
  }

}
