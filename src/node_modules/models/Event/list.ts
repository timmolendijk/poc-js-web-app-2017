import * as fetch from 'isomorphic-fetch';
import * as jsonp from 'jsonp';
import * as promisify from 'es6-promisify';
const jsonpAsync = promisify(jsonp);
import { createTransportError } from 'transport';
import { IEventData } from './transport';

const endpoint = "https://api.meetup.com/AmsterdamJS/events?desc=true&photo-host=public&page=200&sig_id=5314113&status=past%2Cupcoming&sig=0fd5f3c192415dc26672d3bed99455481322375f";

function fromSourceFormat(data: any): IEventData {
  return {
    id: data.id,
    name: data.name,
    pageUrl: data.link,
    venueName: data.venue.name,
    startTime: data.time
  };
}

let list;

if (process.env.RUN_ENV === 'server')

  list = async function () {
    const response = await fetch(endpoint);
    if (!response.ok)
      throw createTransportError('list', `${response.status}: ${response.statusText}`);
    return (await response.json()).map(fromSourceFormat);
  };

else

  list = async function () {
    const response = await jsonpAsync(endpoint, {
      param: 'callback',
      name: 'cb'
    });
    if (response.data.errors && response.data.errors.length)
      throw createTransportError('list', `${response.status}: ${response.statusText}`);
    return response.data.map(fromSourceFormat);
  };

export default list;
