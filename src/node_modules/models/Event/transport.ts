import { awaitAll, IAwaitable } from 'await';
import { ITransport } from 'transport';
import { Event } from 'models';
import list from './list';

export interface IEventData {
  id: number;
  name: string;
  pageUrl: string;
  venueName: string;
  startTime: number;
}

// TODO(tim): I think this can or should be a singleton.
export default class EventTransport implements ITransport<Event>, IAwaitable {

  private readonly awaiting = new Set<Promise<any>>();

  async list(opts?) {
    const promise = list(opts);
    this.awaiting.add(promise);
    const response = await promise;
    this.awaiting.delete(promise);
    return response.map((item: IEventData) => new Event(item));
  }

  get await() {
    return awaitAll([...this.awaiting]);
  }

}
