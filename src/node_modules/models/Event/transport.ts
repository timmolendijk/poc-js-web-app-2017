import { ITransport } from 'transport';
import { IAwaitable, awaitAll } from 'await';
import { Event } from 'models';
import list from './list';

export interface EventData {
  id: number;
  name: string;
  pageUrl: string;
  venueName: string;
  startTime: number;
}

export default class implements ITransport<Event>, IAwaitable {

  constructor(private readonly mapResult: (data: EventData) => Event) {}

  private readonly transport: ITransport<EventData> = { list };
  private readonly awaiting = new Set<Promise<any>>();

  async list(opts?) {
    const promise = this.transport.list(opts);
    this.awaiting.add(promise);
    const response = await promise;
    this.awaiting.delete(promise);
    return response.map(this.mapResult);
  }

  get await() {
    return awaitAll([...this.awaiting]);
  }

  toJSON() {
    return;
  }

}
