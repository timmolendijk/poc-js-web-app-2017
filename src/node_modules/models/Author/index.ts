import { pick } from 'lodash';
import { computed } from 'mobx';
import { observable } from 'scoopy-mobx';
import { ITransport } from 'transport';
import transport from './transport';

export interface IAuthorData {
  id: string;
  name?: string;
  markedName?: string;
}

export default class Author {

  // TODO(tim): Turns out, if class contains a getter or method named `name`,
  // `Author.name` no longer returns `"Author"` (but instead `""`). Why??
  static readonly displayName = 'Author';

  static readonly transport: ITransport<Author> = transport;

  constructor(data?: IAuthorData) {
    if (data)
      this.data = data;
  }

  // TODO(tim): Treating all field values as a single object will result in
  // suboptimally efficient change propagation and memoization.
  @observable private data: Partial<IAuthorData> = {};

  @computed get id() {
    return this.data.id;
  }

  @computed get name() {
    if (this.data.name)
      return this.data.name;
    if (this.data.markedName)
      return this.data.markedName.replace(/\<\/?mark\>/g, '');
  }

}
