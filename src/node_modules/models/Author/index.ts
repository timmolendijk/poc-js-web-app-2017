import { computed } from 'mobx';
import { field } from 'scoopy';
import { observable } from 'scoopy-mobx';
import { IListResult } from 'transport';
import { IArticleListParams, IArticleListResult, Article, IVirtualArray } from 'models';
import transport from './transport';

export interface IAuthorData {
  id: string;
  name: string;
  articlesLoaded?: ReadonlyArray<Article>;
  articlesSize?: number;
  articlesParams?: IArticleListParams;
}

class AuthorData implements IAuthorData {

  constructor(data?: IAuthorData) {
    if (data)
      Object.assign(this, data);
  }

  @observable id;
  @observable name;
  @observable articlesLoaded;
  @observable articlesSize;
  @observable articlesParams;

}

// TODO(tim): Define constructor type of this type, so we can enforce that it
// has a static `transport` field that abides to the `ITransport<Event>`
// interface? (If we annotate the field as such directly, we will lose out on
// anything that is part of `transport` but not part of `ITransport<Event>`.)
export default class Author {

  // TODO(tim): Turns out, if class contains a getter or method named `name`,
  // `Author.name` no longer returns `"Author"` (but instead `""`). Why??
  static readonly displayName = 'Author';

  static readonly transport = transport;

  constructor(data?: IAuthorData) {
    this.data = new AuthorData(data);
  }

  // TODO(tim): This currently cannot be a `field` but instead needs to be an
  // `observable` or stuff will break. Not entirely sure why exactly yet.
  @observable private readonly data: AuthorData;

  @computed get id() {
    return this.data.id;
  }

  @computed get name() {
    return this.data.name.replace(/\<\/?mark\>/g, '');
  }

  @computed get profileUrl() {
    return `https://journa.be/authors/${this.id}`;
  }

  getArticles(): IArticleListResult {
    // TODO(tim): Support the scenario of empty `articlesLoaded` via lazy-
    // loading based on `articlesParams`?
    if (!this.data.articlesLoaded)
      return;

    return Object.assign(
      [],
      this.data.articlesLoaded,
      {
        size: this.data.articlesSize,
        params: this.data.articlesParams
      }
    );
  }

}
