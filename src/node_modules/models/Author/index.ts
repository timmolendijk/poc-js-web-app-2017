import { computed } from 'mobx';
import { observable } from 'scoopy-mobx';
import { IListResult } from 'transport';
import { IArticleData, IArticleListParams, IArticleListResult, Article, IVirtualArray } from 'models';
import transport from './transport';

export interface IAuthorData {
  id: string;
  name: string;
  articlesLoaded?: ReadonlyArray<IArticleData>;
  articlesSize?: number;
  articlesParams?: IArticleListParams;
}

// TODO(tim): Define constructor type of this type, so we can enforce that it
// has a static `transport` field that abides to the `ITransport<Event>`
// interface? (If we annotate the field as such directly, we will lose out on
// anything that is part of `transport` but not part of `ITransport<Event>`.)
export default class Author {

  // TODO(tim): Turns out, if class contains a getter or method named `name`,
  // `Author.name` no longer returns `"Author"` (but instead `""`). Why??
  static readonly displayName = 'Author';

  static readonly transport = transport;

  constructor(data?: IAuthorData) {
    if (data)
      this.data = data;
  }

  // TODO(tim): Treating all field values as a single object will result in
  // suboptimally efficient change propagation and memoization.
  @observable private data: Partial<IAuthorData> = {};

  @computed get id() {
    return this.data.id;
  }

  @computed get name() {
    return this.data.name.replace(/\<\/?mark\>/g, '');
  }

  @computed get profileUrl() {
    return `https://journa.be/authors/${this.id}`;
  }

  @computed get articles(): IArticleListResult {
    if (this.data.articlesLoaded)
      return Object.assign(
        [],
        this.data.articlesLoaded.map(article => new Article(article)),
        {
          size: this.data.articlesSize,
          params: this.data.articlesParams
        }
      );
  }

}
