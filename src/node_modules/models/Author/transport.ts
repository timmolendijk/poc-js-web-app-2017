import * as url from 'url';
import { IListParams, IListResult, createTransportError } from 'transport';
import { Author } from 'models';
import { IAuthorData } from './';

interface IAuthorListParams extends IListParams {
  readonly query: string;
  readonly limit?: number;
}

interface IAuthorListResult extends IListResult<Author, IAuthorListParams> {}

async function list(params: IAuthorListParams): Promise<IAuthorListResult> {
  params = {
    limit: 10,
    ...params
  };

  const response = await fetch(
    url.format({
      protocol: 'https',
      hostname: 'api.journa.io',
      pathname: ['authors', 'search'].map(encodeURIComponent).join('/'),
      query: {
        query: params.query,
        limit: params.limit
      }
    }),
    {
      cache: 'no-cache',
      credentials: 'include',
      mode: 'cors'
    }
  );

  if (!response.ok)
    throw createTransportError('list', `${response.status}: ${response.statusText}`);
  
  const data = await response.json();

  return Object.assign(
    data.results.slice(0, params.limit).map(data => new Author({
      id: data.id,
      markedName: data.fullName
    })),
    {
      size: data.count,
      params
    }
  );
}

export default { list };
