import * as url from 'url';
import { IListResult, createTransportError } from 'transport';
import { Author } from 'models';
import { IAuthorData } from './';

interface IAuthorListResult extends IListResult<Author> {
  size: number;
}

async function list({ query, limit = 10 }): Promise<IAuthorListResult> {
  const response = await fetch(
    url.format({
      protocol: 'https',
      hostname: 'api.journa.be',
      pathname: ['search', query].map(encodeURIComponent).join('/'),
      query: { limit }
    }),
    {
      cache: 'no-cache',
      credentials: 'include',
      mode: 'cors'
    }
  );

  if (!response.ok)
    throw createTransportError('list', `${response.status}: ${response.statusText}`);
  
  const data = await response.json();

  const result = data.authors.map(data => new Author({
    id: data.id,
    markedName: data.fullName
  }));
  result.size = data.totalAuthorCount;
  return result;
}

export default { list };
