export interface IListOptions {
  [opt: string]: any;
}

export interface IListResult<M> extends ReadonlyArray<M> {}

export interface ITransport<M> {
  list(opts?: IListOptions): Promise<IListResult<M>>;
}

type IOperation = keyof ITransport<any>;

// TODO(tim): Move the generic part of this logic to `./Error`.

export interface ITransportError {
  name: 'TransportError';
  operation: IOperation;
}

export function createTransportError(operation: IOperation, message: string) {
  return Object.assign(new Error(message), {
    name: 'TransportError',
    operation
  });
}

export function isTransportError(err): err is ITransportError {
  return (err as ITransportError).name === 'TransportError';
}
