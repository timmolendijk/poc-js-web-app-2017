import * as React from 'react';
import { Provider, inject } from 'mobx-react';
// TODO(tim): Use `recompose/getDisplayName` instead.
import { getDisplayName } from 'recompose';
// TODO(tim): Use `lodash.partialright` instead.
import { partialRight } from 'lodash';
import { IAwaitable, awaitProps } from 'await';

type IStore = any;

export interface IStores {
  [internal: string]: IStore;
}

interface IProvide {
  state: State;
}

export function ProvideState({ state, children }: { state: State, children? }) {
  const providing: IProvide = { state };
  return <Provider {...providing}>
    <div>{children}</div>
  </Provider>;
}

export function injectStore<P>(factory: (this: IStores, data, stores: IStores) => IStore) {
  return (BaseComponent: React.ComponentClass<P> | React.StatelessComponent<P>) =>
    // TODO(tim): Adjust `displayName` in line with how `./render/propsObserver`
    // does it?
    inject<P, P>(({ state }: IProvide, props: P) => Object.assign(
      { store: state.addStore(getDisplayName(BaseComponent), partialRight(factory.bind(state.stores), state.stores)) },
      props
    ))(BaseComponent);
}

export class State implements IAwaitable {

  constructor(data?) {
    this.data = data || {};
  }

  private readonly data;

  readonly stores: IStores = {};

  addStore<S extends IStore>(key: string, factory: (data) => S): S {
    if (!(key in this.stores))
      this.stores[key] = factory(this.data[key]);
    return this.stores[key];
  }

  get await() {
    return awaitProps(this.stores);
  }

  toJSON() {
    return this.stores;
  }

}
