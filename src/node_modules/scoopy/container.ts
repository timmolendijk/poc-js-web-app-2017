import { createStore, Store } from 'redux';
import { NS, hasHiddenProp, getHiddenProp, setHiddenProp } from '.';

// TODO(tim)
type IStateShape = any;

function getTypeName(Type): string {
  // TODO(tim): Look first into type registry.
  const name = Type.displayName || Type.name;
  if (!name)
    throw new Error("Type needs a name");
  return name;
}

export default class Container {

  constructor(preloadedState?, enhancer?) {
    this.store = createStore(this.reducer, preloadedState, enhancer);
    setHiddenProp(this.store, 'container', this);
  }

  readonly store: Store<IStateShape>;

  private readonly reducer = (state = {}, action) => {
    if (action.type === `${NS}/CREATE`)
      state = {
        ...state,
        [action.ref.type]: {
          ...state[action.ref.type],
          [action.ref.id]: action.data
        }
      };
    if (action.type === `${NS}/UPDATE`)
      state = {
        ...state,
        [action.ref.type]: {
          ...state[action.ref.type],
          [action.ref.id]: {
            ...state[action.ref.type][action.ref.id],
            ...action.data
          }
        }
      };
    return state;
  }

  dispatch(action) {
    return this.store.dispatch(action);
  }

  get subscribe() {
    return this.store.subscribe;
  }

  private readonly objects: WeakSet<any> = new WeakSet();

  getField(object, name) {
    const ref = this.createRef(object);
    return this.store.getState()[ref.type][ref.id][name];
  }

  setField(object, name, value) {
    const type = this.objects.has(object) ?
      `${NS}/UPDATE` : `${NS}/CREATE`;
    const ref = this.createRef(object);
    const data = { [name]: value };
    this.dispatch({ type, ref, data });
    this.objects.add(object);
  }

  private objectIdCounter: number = 1;

  private createRef(object) {
    if (!hasHiddenProp(object, 'id'))
      setHiddenProp(object, 'id', this.objectIdCounter++);
    return {
      [`${NS}/type`]: 'ref', 
      type: getTypeName(object.constructor),
      id: getHiddenProp(object, 'id')
    };
  }

  toJSON() {
    return this.store.getState();
  }

}
