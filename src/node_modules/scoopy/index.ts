export const NS = '@@scoopy';

const hiddenProps: WeakMap<any, { [name: string]: any }> = new WeakMap();
export function hasHiddenProp(object, name) {
  return name in (hiddenProps.get(object) || {});
}
export function getHiddenProp(object, name) {
  return (hiddenProps.get(object) || {})[name];
}
export function setHiddenProp(object, name, value) {
  hiddenProps.set(object,
    Object.assign(hiddenProps.get(object) || {}, { [name]: value })
  );
}

// State (object fields) that does not (yet) belong to a container lives here.
// TODO(tim): Redesign into a single object with methods, and aim for a shared
// interface with `Container`.
export function hasField(object, name) {
  return name in (getHiddenProp(object, 'fields') || {});
}
export function getField(object, name) {
  return (getHiddenProp(object, 'fields') || {})[name];
}
const fieldListeners = [];
export function setField(object, name, value) {
  setHiddenProp(object, 'fields',
    Object.assign(getHiddenProp(object, 'fields') || {}, { [name]: value })
  );
  for (const listener of fieldListeners)
    listener();
}
export function subscribeToField(listener) {
  fieldListeners.push(listener);
}

export { default as Container } from './container';
export { default as id } from './id';
export { default as observable } from './observable';
