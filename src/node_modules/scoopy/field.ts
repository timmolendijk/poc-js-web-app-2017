import * as React from 'react';
// TODO(tim): This is fragile.
import storeShape from 'react-redux/lib/utils/storeShape';
import { registerType } from './type';
import Instance from './instance';

const field: PropertyDecorator = <T>(target, name: string, ...others): TypedPropertyDescriptor<T> => {
  if (others.filter(other => other != null).length > 0)
    throw new Error("`field` decorator can only be applied to instance property");
  
  if (target instanceof React.Component) {
    const Component = target.constructor as React.ComponentClass<any>;
    Component.contextTypes = {
      ...Component.contextTypes,
      store: storeShape
    };
  }

  registerType(target.constructor);

  function get(): T {
    return Instance.get(this).getFieldValue(name);
  }

  function set(value: T) {
    Instance.get(this).setFieldValue(name, value);
  }

  return { get, set, enumerable: true, configurable: true };
};

export default field;
